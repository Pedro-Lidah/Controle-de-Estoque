let produtos = []; // Matriz para armazenar os produtos.

function menu() { // Fun√ß√£o principal do menu para escolha da op√ß√£o do usu√°rio.

    let opcao;
    do {
        opcao = prompt(
            "Menu:\n" +
            "1 ‚úèÔ∏è - Cadastrar produto\n" +
            "2 üîç - Listar produtos\n" +
            "3 üì• - Atualizar produto\n" +
            "4 üóë - Remover produto\n" +
            "5 üñ• - Exibir valor total do estoque\n" +
            "0 - Sair"
        );

    switch(opcao) { // Switch para chamar a fun√ß√£o escolhida pelo usu√°rio.

        case "1": 
            cadastrar(); 
            break;

        case "2": 
            listar(); 
            break;

        case "3": 
            atualizar(); 
            break;

        case "4": 
            remover(); 
            break;

        case "5":
             valorTotal(); 
             break;

        case "0": 
            alert("Saindo..."); 
            break;

        default: 
            alert("Op√ß√£o inv√°lida!");
        }
    } while(opcao !== "0");
}

function cadastrar() { // Fun√ß√£o para cadastrar um novo produto.

    let nome = prompt("Nome do produto:");
    let preco = parseFloat(prompt("Pre√ßo:"));
    let qtd = parseInt(prompt("Quantidade:"));
    
    // Valida√ß√£o de dados. Em caso de erros, armazena no array erros e exibe no final do prompt.

    let erros = []; 

    let index = buscarNome(produtos, nome);
    if (index !== -1) {
      erros.push('Produto j√° existe.');
    }

    if(!nome || nome.length < 2) erros.push('‚ùå Nome n√£o pode estar vazio ou ter menos de 2 caracteres.');
    if(isNaN(preco) || preco <= 0) erros.push('‚ùå Pre√ßo deve ser um n√∫mero positivo.');
    if(isNaN(qtd) || qtd < 0) erros.push('‚ùå Quantidade deve ser maior que 0')
    if(erros.length > 0){
        alert(erros.join("\n"));
    }

    if(erros.length === 0){ // Caso o array esteja vazio, cadastra o produto.
        produtos.push([nome, preco, qtd]);
        alert("‚úÖ Produto cadastrado!")
    }
}

function buscarNome(matriz, nome){ // Fun√ß√£o para impedir um cadastro duplicado ( Ainda n√£o implementada ).
    return matriz.findIndex(linha => linha[0] === nome)
}

function listar() { // Fun√ß√£o para listar os produtos cadastrados.

    let texto = "=== Produtos ===\n";

    for(let i=0; i<produtos.length; i++) {

        let nome = produtos[i][0]; // Atribui as vari√°veis os valores de cada coluna da matriz.
        let preco = produtos[i][1];
        let qtd = produtos[i][2];

        let alerta = (qtd <= 5) ? " ‚ö†Ô∏è ESTOQUE BAIXO" : "";
        texto += `${i+1}. Produto: ${nome} - Pre√ßo: R$${preco.toFixed(2)} - Quantidade: ${qtd}${alerta}\n`;
}
//document.getElementById("saida").textContent = texto; 
    alert(texto);
}

function atualizar() { // Fun√ß√£o para atualizar um produto cadastrado.

    // Chama a fun√ß√£o listar para mostrar os produtos cadastrados. Pede o n√∫mero do produto para escolher qual atualizar ( √çndice -1 para facilitar o usu√°rio ).
    listar();
    let indice = parseInt(prompt("Digite o numero do produto para atualizar:")) - 1;

    if(indice >=0 && indice < produtos.length) {

        let nome = produtos[indice][0]; 
        let preco = produtos[indice][1];    
        let qtd = produtos[indice][2];

        let novoNome = prompt("Novo nome:", nome);
        let novoPreco = parseFloat(prompt("Novo pre√ßo:", preco));
        let novaQtd = parseInt(prompt("Nova quantidade:", qtd)); // Com base no √≠ndice, mostra os antigos valores e pede os novos ou mant√©m os antigos.

        produtos[indice] = [novoNome, novoPreco, novaQtd];
        alert("‚úÖ Produto atualizado!"); 
    } else {
        alert("‚ùå Produto n√£o encontrado.");
    }
}

function remover() { // Fun√ß√£o para remover um produto cadastrado.

    // Chama a fun√ß√£o listar para mostrar os produtos cadastrados. Pede o n√∫mero do produto para escolher qual remover ( √çndice -1 para facilitar o usu√°rio ).
    listar();
    let indice = parseInt(prompt("Digite o numero do produto para remover:")) - 1;

    // Com base no √≠ndice, remove o produto da matriz utilizando a fun√ß√£o splice.
    if(indice >=0 && indice < produtos.length) { 
        produtos.splice(indice, 1);
        alert("‚úÖ Produto removido!");
    } else {
        alert("‚ùå Produto nao encontrado.");
    }
}

function valorTotal() { // Fun√ß√£o para mostrar o valor total do estoque.
    
    let total = 0;

    for(let i=0; i<produtos.length; i++) { // Faz a multiplica√ß√£o do preco pela quantidade dos produtos e soma no final.
        total += produtos[i][1] * produtos[i][2];
    }
    alert("Valor total do estoque: R$" + total.toFixed(2));
}

